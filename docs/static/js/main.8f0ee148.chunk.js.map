{"version":3,"sources":["components/Header.js","components/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","MemeGenerator","usedImageIds","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","handleSubmit","event","target","name","value","this","setState","preventDefault","imgUrl","memeImg","Math","floor","random","length","id","includes","push","url","fetch","then","response","json","memes","data","console","log","onSubmit","type","placeholder","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uSAaeA,MAVf,WACI,OACI,4BAAQC,UAAU,cAEd,yBAAKC,IAAI,iEAAiEC,IAAI,oBAC9E,+C,0CC0EGC,G,wDA9EX,aAAe,IAAD,8BACV,gBACKC,aAAe,GACpB,EAAKC,MAAQ,CACTC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAc,IAElB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVV,E,yDAaDE,GAAQ,IAAD,EACMA,EAAMC,OAArBC,EADS,EACTA,KAAMC,EADG,EACHA,MACbC,KAAKC,SAAL,eAAiBH,EAAQC,M,mCAGhBH,GACTA,EAAMM,iBAGN,IAFA,IACIC,EADEX,EAAcQ,KAAKZ,MAAMI,aAExBW,GAAO,CACV,IACMC,EAAUZ,EADAa,KAAKC,MAAMD,KAAKE,SAAWP,KAAKZ,MAAMI,YAAYgB,SAE3DC,EAAML,EAANK,GAEHjB,EAAYkB,SAASD,KACrBT,KAAKb,aAAawB,KAAKF,GACvBN,EAASC,EAAQQ,KAGzBZ,KAAKC,SAAS,CAAEV,UAAYY,M,0CAGX,IAAD,OAChBU,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACRE,EAASF,EAASG,KAAlBD,MACPE,QAAQC,IAAIH,EAAM,IAClB,EAAKhB,SAAS,CAAET,YAAcyB,S,+BAKtC,OACI,yBAAKlC,UAAU,kBACX,0BAAMA,UAAU,YAAYsC,SAAUrB,KAAKL,cACvC,yBAAKZ,UAAU,UACX,2BACIuC,KAAK,OACLxB,KAAK,UACLyB,YAAY,WACZxB,MAAOC,KAAKZ,MAAMC,QAClBmC,SAAUxB,KAAKP,eAEnB,2BACI6B,KAAK,OACLxB,KAAK,aACLyB,YAAY,cACZxB,MAAOC,KAAKZ,MAAME,WAClBkC,SAAUxB,KAAKP,gBAIvB,6CAEJ,yBAAKV,UAAU,QACX,yBAAKC,IAAKgB,KAAKZ,MAAMG,UAAWN,IAAI,KACpC,wBAAIF,UAAU,OAAOiB,KAAKZ,MAAMC,SAChC,wBAAIN,UAAU,UAAUiB,KAAKZ,MAAME,kB,GAxE3BmC,cCWbC,MATf,WACE,OACE,yBAAK3C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGc4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.8f0ee148.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/Header.scss';\n\nfunction Header() {\n    return (\n        <header className=\"App-header\">\n            {/*<h1>Ap jan.</h1>*/}\n            <img src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" alt=\"Problem ap jan?\"/>\n            <p>Meme Generator</p>\n        </header>\n    );\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport './styles/MemeGenerator.scss';\n\nclass MemeGenerator extends Component {\n    constructor() {\n        super();\n        this.usedImageIds = [];\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            randomImg: \"http://i.imgflip.com/1bij.jpg\",\n            allMemeImgs : [],\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target;\n        this.setState({ [name] : value });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const allMemeImgs = this.state.allMemeImgs;\n        let imgUrl;\n        while(!imgUrl){\n            const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\n            const memeImg = allMemeImgs[randNum];\n            const {id} = memeImg;\n\n            if(!allMemeImgs.includes(id)){\n                this.usedImageIds.push(id);\n                imgUrl = memeImg.url;\n            }\n        }\n        this.setState({ randomImg : imgUrl});\n    }\n\n    componentDidMount() {\n        fetch('https://api.imgflip.com/get_memes')\n            .then(response => response.json())\n            .then(response => {\n                const {memes} = response.data;\n                console.log(memes[0]);\n                this.setState({ allMemeImgs : memes });\n            })\n    }\n\n    render() {\n        return (\n            <div className=\"meme-generator\">\n                <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n                    <div className=\"inputs\">\n                        <input\n                            type=\"text\"\n                            name=\"topText\"\n                            placeholder=\"Top Text\"\n                            value={this.state.topText}\n                            onChange={this.handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            name=\"bottomText\"\n                            placeholder=\"Bottom Text\"\n                            value={this.state.bottomText}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    {/*<h1>{this.state.topText + this.state.bottomText}</h1>*/}\n                    <button>Generate</button>\n                </form>\n                <div className=\"meme\">\n                    <img src={this.state.randomImg} alt=\"\" />\n                    <h2 className=\"top\">{this.state.topText}</h2>\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MemeGenerator;","import React from 'react';\nimport './components/styles/Configs.scss';\nimport Header from './components/Header';\nimport MemeGenerator from './components/MemeGenerator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}